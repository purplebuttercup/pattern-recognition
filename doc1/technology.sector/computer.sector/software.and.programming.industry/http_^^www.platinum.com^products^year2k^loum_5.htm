Server: Netscape-Enterprise/2.01
Date: Fri, 21 Nov 1997 05:34:04 GMT
Content-type: text/html

<HTML>
<HEAD>
<TITLE>Article</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffff" LINK="#010D9B" VLINK="#006633">
<CENTER>
<TABLE BORDER=0 WIDTH=600 CELLPADDING=0 CELLSPACING=0>
<TR><TD COLSPAN=2><IMG SRC="/mc-icons/logo1.gif" BORDER=0 WIDTH=126 HEIGHT=36 ALT="PLATINUM"><IMG SRC="/mc-icons/articles.gif" BORDER=0 WIDTH=324 HEIGHT=36 ALT="Article"><A HREF="/index.html"><IMG SRC="/mc-icons/home.gif" BORDER=0 WIDTH=150 HEIGHT=36 ALT="Home"></A><BR><IMG SRC="/mc-icons/logo2.gif" BORDER=0 WIDTH=126 HEIGHT=22 ALT="technology, inc."><A HREF="/new.htm"><IMG SRC="/mc-icons/news1.gif" BORDER=0 WIDTH=42 HEIGHT=22 ALT="News"></A><A HREF="/products/products.htm"><IMG SRC="/mc-icons/product2.gif" BORDER=0 WIDTH=124 HEIGHT=22 ALT="Products & Services"></A><A HREF="/tech/tech.htm"><IMG SRC="/mc-icons/support1.gif" BORDER=0 WIDTH=54 HEIGHT=22 ALT="Support"></A><A HREF="/Architext/gsearch.htm"><IMG SRC="/mc-icons/search1.gif" BORDER=0 WIDTH=36 HEIGHT=22 ALT="Find"></A><A HREF="/corp/about.htm"><IMG SRC="/mc-icons/corp1.gif" BORDER=0 WIDTH=68 HEIGHT=22 ALT="Corporate"></A><A HREF="/world.htm"><IMG SRC="/mc-icons/world1.gif" BORDER=0 WIDTH=76 HEIGHT=22 ALT="Worldwide"></A><A HREF="/mail.htm"><IMG SRC="/mc-icons/contact1.gif" BORDER=0 WIDTH=74 HEIGHT=22 ALT="Contact Us"></A>
</TD></TR><TR><TD COLSPAN=2 WIDTH=600 HEIGHT=15></TD></TR>
<TR><TD VALIGN=top WIDTH=126 >
<FONT SIZE=2 FACE="Arial">
<A HREF="y2k.htm">Welcome 2000</A><BR><BR>

<A HREF="library.htm">The Y2K Library</A></FONT><BR>
<IMG SRC="/mc-icons/wspace.gif" WIDTH=126 HEIGHT=1 BORDER=0 ALT=" ">
</TD>
<TD VALIGN=top>
<IMG SRC="/mc-icons/loum_5.gif" WIDTH=203 HEIGHT=250 HEIGHT= ALT="Year 2000 Travel Guide" ALIGN=left>
<BR><BR>
<FONT SIZE="4" FACE="Arial"><B>Successful Year 2000 Implementation</B></FONT>
<FONT SIZE="2" FACE="Arial">
<BR>&nbsp;<BR>
<B>by <A HREF="lou.htm">Lou Marcoccia</A></B>
<BR><BR><BR>					
<B>Notes  On  Implementation</B><BR>
When it comes to successful Y2K implementation, the first thing I tell people is that it’s all about leadership.  Someone in your organization has to pick up the gauntlet, push it, and make people aware. You make people aware by going to seminars, by providing articles to senior management, and by putting a plan together  for implementation. From there, you can do almost anything.
<BR>&nbsp;<BR>
Basically, there are two major phases for implementation. Our approach to Phase I was defined quite simply: "How big is our problem and how big is the room we have to paint?"  Before we started anything, our first position was to perform an analysis.  That’s where an impact analysis tool really comes in handy.  It gives you the ability to look through your programs, your portfolio, and find out where your dates are, how many programs are affected, and what the cost will be to fix  those programs.
<BR>&nbsp;<BR>
After analysis comes the time to ask some hard questions.  In order to allow for testing, you basically have until December of 1998 to address your mission critical applications.  You'll have to decide which applications will comply and which won't.  Organizations that have not moved on this early enough will have to make those types of critical decisions and will be forced to accept that some applications won’t make the list.  One of the most important issues from a business aspect will be how  to deal with non-compliant applications.  Do you manually perform some processes?  Do you just have a team of programmers that sit at the data center, ready to attack these programs when they bomb out?  The time is clearly ripe for smashing orthodoxy.
<BR>&nbsp;<BR>
During this process you start to develop a priority list.  The way we prioritized our systems was two-fold.  We had an in-house disaster recovery plan that we used as a starting point for what was mission critical and what wasn't.  But after Phase I &#151; once we knew where the problems really were &#151; we reprioritized which systems we were going to attack.  This was mainly driven by the number of resources needed and when the system was likely to fail.  It’s best to be open-minded during this transition period.
<BR>&nbsp;<BR>
Another hot area is transitioning from your analysis phase into implementation &#151; Phase I to Phase II. You’ll need to secure and mobilize the necessary  resources.  That’s going to take some decision making.  Do you do this in-house?  Do you do this out-of-house?  <A HREF="loum_2.htm">Do you take the logical approach, or do you take the expansion approach?</A> You’ll need to select a pilot to validate the cost model and to justify  keeping the process in-house.  Does your internal process work? You may very well discover that some of your applications were written in some weird language that requires calling in outside consulting help.  Do the change control procedures work?  Does the testing function as planned?  Does the model that you built actually work?  You’ll  need to look at each of the applications and develop a technical solution for each of your systems.  You need to decide whether to  integrate the Year 2000 into an existing initiative for each application.  This may require interim changes.  It may drive you to a package.  For example, when we looked at our general ledger system, we decided that it was too old  to invest money in it.  We actually decided to replace it with a new package.  It was helpful for us to assign one of three conversion categories to each application.  Category  I applications were ones that we knew we had to correct &#151; and that were not going to be replaced by packages. Category II’s were applications that were slated for replacement with alternate packages.  A  Category III application was one that was compliant.
<BR>&nbsp;<BR>
What does compliancy mean?  It means four things:
<OL>
<LI>You receive a signed document from the IT manager saying it's compliant.  
<LI>You receive a letter from the user who owns the application saying that he tested it, and 	  	it's in production and that it's correct.
<LI>You receive certification from your project office. 
<LI>An examination from your internal auditors confirms compliancy.
</OL>
<FONT SIZE=3><B>A Year 2000 Project Outline</B></FONT>
<BR><BR>
The following is a complete project outline for the Year 2000 implementation I supervised while Year 2000 Project Director with the New York Transit Authority.  I hope you’ll find it helpful in your endeavors.
<BR>&nbsp;<BR>
<B>PHASE 1: Analysis</B>
<BR>&nbsp;<BR>
<B>Purpose:</B><BR>
To estimate the cost and resources needed to implement all application software on diverse software/hardware platforms, including in-house developed and third-party vendor software.  
<BR>&nbsp;<BR>
<B>Major Steps:</B><OL>
<LI>If required, clean-up legacy applications  to prepare for Year 2000 (System Redevelopment Process).
<LI>Strengthen or establish a controlled and effective change control process.
<LI>Establish a Year 2000 project manager and team.
<LI>Develop questionnaire for all local IS units, if any in your organization, to gather 	application inventory and potential exposure.
<LI>Establish a date standard for all in-house and packaged software.
<LI>Develop a portfolio of all third-party software.  Formally notify and coordinate with software providers for their plans to become Year 2000 compliant. 
<LI>Have all business units within an organization agree on one overall strategy, 	recognizing that the tactical implementations might be different. 
<LI>Develop an RFP to select consulting services by class for all platforms or perform analysis with internal staff.
<UL>						
<LI>Class 1 - Turn-key solution
<LI>Class 2 - Project management firm 
<LI>Class 3 - Time and material
</UL>
<LI>Produce the Phase I analysis for all systems by category.  
<UL>
<LI>Category 1 - Applications retained and to be converted 
<LI>Category 2 - Current active plan to replace applications
<LI>Category 3 - Applications already Year 2000 compliant   
</UL></OL>        
<B>PHASE 1: Technical Reports (Analysis)</B>
<BR><OL>
<I><LI> Impact Estimates:</I><UL>
<LI> Total resources required for the Year 2000 
<LI>Identification of each computer module impacted
<LI>Total number of impacted lines per program
<LI>Total work hours/CPU time required for conversion	
</UL>
<LI> <I>Where Dates Are Located:</I><UL>
<LI>Locate and print out every impacted line in each impacted program module
</UL></OL>
<B>PHASE 1: Management Reports (Analysis)</B>
<BR><OL>
<LI><I> Business Impact Statements:</I>
<UL><LI> Describes what the business impact will be for each application if it does not become Year 2000 compliant
</UL>			
<LI><I> Project Schedule:</I>
<UL>
<LI> Enterprise schedule for all category 1 applications
</UL>       
<LI><I> Project Gantt Chart:</I>
<UL>
<LI> Enterprise Gantt chart for all category 1 applications
</UL>
<LI><I> Cost Matrix: </I>
<UL>
<LI> Cost estimate for all resources needed for all category 1 applications &#151; hardware, software, testing, staffing, data center, etc.	
<LI> Preliminary cost estimate for category 2 applications   	
<LI> Listing and confirmation of category 3 applications
<LI> Develop and implement Year 2000 certification process
</UL></OL>
<B>PHASE 2: Implementation</B>
<BR>&nbsp;<BR>
<B>Purpose:</B><BR> 
To implement the tactical plan, for each application, developed in Phase I analysis.            
<BR>&nbsp;<BR>
<B>Major Steps:</B>
<OL>
<LI>Secure and mobilize the necessary resources defined in Phase I.
<UL>
<LI>In-house team
<LI>Consulting services
<LI>Software purchases
</UL>
<LI>Select a pilot application to verify the cost model developed in Phase I &#151; make the necessary cost adjustments based on the pilot results.
<LI>Resolve the necessary legal / procurement issues.
<UL>
<LI>Third-party providers questionnaire
<LI>Third-party software
<LI>Year 2000 compliant statement in contracts 
</UL></OL>

<FONT SIZE=3><B>Year 2000 Tools Round Up</B></FONT>
<BR>&nbsp;<BR>
There are a couple of tools that you will need for implementation.  These can be divided into 3 types: mandatory, infrastructure and desired.
<BR>&nbsp;<BR>
You will absolutely need a date simulation tool  to emulate the Year 2000 and beyond, inclusive of the leap year. This tool allows you to test without incurring damages.  From there,  you need to perform a Year 2000 test that actually simulates several dates before and after the Year 2000. This is to ensure that 2000 hits the application and  it operates as it should.  Look for a tool that simulates a system date at the CICS level, at the job level, and at the step level.
<BR>&nbsp;<BR>
<B>Mandatory Tools</B> 
<BR>
<I>Methodology:</I> A complete detail process and approach to the entire Year 2000 project life cycle.  
<BR>&nbsp;<BR>
<I>Project Management:</I> A project management tool is a necessary evil.  However, don’t make the mistake of thinking that a strong project management tool will replace a strong management team.  A tool is an enabler for you to manage a dedicated team.  Your team won’t necessarily implement the Year 2000 compliancy, but they will manage all of the activities with the tool assisting.
<BR>&nbsp;<BR>
<I>Impact Analysis:</I> Detailed analysis and review of your specific modules to measure the scope of the Year 2000 changes required for your organization.  Management cost reports as well as technical program level reports used for program specifications will be generated.		     
<BR>&nbsp;<BR>
<I>Date Simulator:</I> Automates the process of testing date logic in batch and online applications.  It allows the simulation of any date so the computer system date does not have to be changed.  You will absolutely need a date simulation tool  to emulate the Year 2000 and beyond, inclusive of the leap year.  This tool allows you to test without incurring damages.  From there,  you need to perform a Year 2000 test that actually simulates several dates before and after the Year 2000.  This is to ensure that 2000 hits the application and  it operates as it should.  Look for a tool that simulates a system date at the CICS level, at the job level, and at the step level.
<BR>&nbsp;<BR>
<I>Testing Tools:</I> Automates application, system, and network software testing while simultaneously ensuring quality of all systems.  Automates the test script process for both technical and user testing.  Test scripts can be saved, continuously built upon and referenced at a later time. 
<BR>&nbsp;<BR>
<B>Infrastructure Tools</B>
<BR>
<I>Change Control Process:</I> There will be some internal tools that you have currently that you probably won't need to buy, like a change control tool–or as I call it, an infrastructure tool.  If you don’t have one that you're reasonably happy with, now is the time to change.  Look for those that include some impact-analysis function along with them.  Formal automated process and software that controls the  migration of source modules, load modules, executable JCL, production PROCS, file definitions, and screen maps for each application from test environments to production for all platforms.  This process is also intended to provide line-item level change tracking reporting.
<BR>&nbsp;<BR>
<I>System Redevelopment (Legacy Clean-Up):</I> This process requires a number of tasks to be performed as a housekeeping/repair function involving all legacy applications.  The purpose of this process is to establish a stable production environment by installing an automated process at the application level, cleaning-up production jobs while maintaining  functionality, developing standards online, and monitoring the changes on an ongoing basis.  
<BR>&nbsp;<BR>
<B>Desired Tools</B>
<BR>
<I>Data Rationalization:</I> Data names must be cleansed and all source, definitions, and systems fully described.  Software programs  and in-house processes will be utilized for rationalizing data.  Rationalize legacy data elements into the corporate data dictionary maintained on the mainframe and client-server platform.  Load the corporate data dictionary with the rationalized data elements (metadata), and create a data warehouse for all legacy systems.  Since all dates must be reviewed for the Year 2000 project, this allows the organization to position itself to establish a data warehouse for legacy systems.                                   
<BR>&nbsp;<BR>
<B>Summary</B><BR>
While the Year 2000 problem is really a small problem at the level of program code, it is a huge project management, configuration management, and application software maintenance challenge at the portfolio level.  While successful implementation is dependent on many factors, the two things you cannot do without are a powerful suite of software tools and a strong individual willing to drive the process from initial planning through to final certification.  With this combination in place, you’ll be well on the road to Year 2000 success.
</FONT>
<BR>&nbsp;<BR>
<FONT SIZE=1><A HREF="/copyrght.htm">&copy; 1995, 1997</A> PLATINUM <I>technology, inc</I>. All rights reserved.<BR>800-442-6861&nbsp;&nbsp;&nbsp;630-620-5000&nbsp;&nbsp;&nbsp;Fax: 630-691-0718</FONT>
</TD VALIGN=right></TR></TABLE>
</CENTER></BODY></HTML>